@page "/recipes/details"
@inject Server.Data.ApplicationDbContext DB
@using Server.Data
@inject NavigationManager NavigationManager
@inject DataController DataController
@using Microsoft.EntityFrameworkCore
@inject NotificationHandler NotificationHandler

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Recipe</h4>
    <hr />
    @if (recipe is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@recipe.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@recipe.Description</dd>
            <dt class="col-sm-2">Duration</dt>
            <dd class="col-sm-10">@recipe.Duration</dd>
            <dd class="col-sm-2">Ingredients</dd>
            <dd class="col-sm-10">
                <ul>
                    @foreach (var i in recipe.Ingredients) {
                        <li>@i.Product.Name: @i.Count</li>
                    }
                </ul>
            </dd>
        </dl>
        <div>
            <a href="@($"/recipes/edit?id={recipe.Id}")">Edit</a> |
            <a href="@($"/recipes")">Back to List</a>
            <button type="button" disabled="@(!cookable)" @onclick="(() => Cook(recipe))">Cook</button>
            <p>@cookedString</p>
        </div>
    }
</div>

@code {
    Recipe? recipe;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private bool cookable;

    string cookedString = "";

    protected override async Task OnInitializedAsync()
    {
        recipe = await DB.Recipes.Include(r => r.Ingredients).ThenInclude(i => i.Product).FirstOrDefaultAsync(m => m.Id == Id);

        if (recipe is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else 
            cookable = DataController.Cookable(recipe);
    }

    private void Cook(Recipe r) {
        cookedString = "Recipe cooked! (Products amount removed from database)";
        DataController.Cook(r);
        foreach (var rp in r.Ingredients) {
            if (rp.Product.Count == 0) {
                NotificationHandler.NotifyImmediate("0 of " + rp.Product.Name, NotifPriority.HIGH);
            }
            else if (rp.Product.Count < rp.Product.MinimumCount) {
                NotificationHandler.NotifyImmediate($"{rp.Product.Count} of {rp.Product.Name}", NotifPriority.MEDIUM);
            }
        }
        cookable = DataController.Cookable(recipe);
    }
}
