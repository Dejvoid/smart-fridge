@page "/Products/edit"
@inject Server.Data.ApplicationDbContext DB
@using Server.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject NotificationHandler NotificationHandler

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Product</h4>
<hr />
@if (Product is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Product.Id" value="@Product.Id" />
                <div class="mb-3">
                    <label for="barcode" class="form-label">Barcode:</label>
                    <InputText id="barcode" @bind-Value="Product.Barcode" class="form-control" />
                    <ValidationMessage For="() => Product.Barcode" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Product.Name" class="form-control" />
                    <ValidationMessage For="() => Product.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="count" class="form-label">Count:</label>
                    <InputNumber id="count" @bind-Value="Product.Count" class="form-control" />
                    <ValidationMessage For="() => Product.Count" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="minimumcount" class="form-label">MinimumCount:</label>
                    <InputNumber id="minimumcount" @bind-Value="Product.MinimumCount" class="form-control" />
                    <ValidationMessage For="() => Product.MinimumCount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="expiry" class="form-label">Expiry:</label>
                    <InputDate id="expiry" @bind-Value="Product.Expiry" class="form-control" />
                    <ValidationMessage For="() => Product.Expiry" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="defaultexpirydays" class="form-label">DefaultExpiryDays:</label>
                    <InputNumber id="defaultexpirydays" @bind-Value="Product.DefaultExpiryDays" class="form-control" />
                    <ValidationMessage For="() => Product.DefaultExpiryDays" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Product? Product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Product ??= await DB.Products.FirstOrDefaultAsync(m => m.Id == Id);

        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateProduct()
    {
        DB.Attach(Product!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
            if (Product!.Count == 0) {
                NotificationHandler.NotifyImmediate("0 of " + Product.Name, NotifPriority.HIGH);
            }
            else if (Product!.Count < Product.MinimumCount) {
                NotificationHandler.NotifyImmediate($"{Product.Count} of {Product.Name}", NotifPriority.MEDIUM);
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductExists(Product!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/products");
    }

    bool ProductExists(int id)
    {
        return DB.Products.Any(e => e.Id == id);
    }
}
